<?xml version="1.0"?>
<launch>
 <!-- Declare the launch arguments -->
  <arg name="autostart" default="true" description="Automatically start the CARMA stack"/>
  <arg name="namespace" default="" description="Top-level namespace"/>
  <arg name="show_image" default="false" description="Whether the camera client should show the output image in a window"/>
  <arg name="use_sim_time" default="true" description="Whether to Use simulation (Gazebo) time"/>

  <!-- The composable node container for the Perception Subsystem -->
  <node_container pkg="rclcpp_components" name="perception_container" namespace="$(var namespace)" exec="component_container" args="" output="screen" launch-prefix="$(env CARMA_LAUNCH_PREFIX '')">
    <composable_node pkg="camera_driver" plugin="camera_driver::CameraDriver" name="camera_driver" namespace="$(var namespace)">
      <param name="use_sim_time" value="$(var use_sim_time)" />
      <extra_arg name="use_intra_process_comms" value="true" />
    </composable_node>
    <composable_node pkg="camera_driver_client" plugin="camera_driver_client::CameraDriverClient" name="camera_driver_client" namespace="$(var namespace)">
      <param name="use_sim_time" value="$(var use_sim_time)" />
      <param name="show_image" value="$(var show_image)" /> 
      <extra_arg name="use_intra_process_comms" value="true" />
    </composable_node>
    <composable_node pkg="carma_delphi_srr2_driver" plugin="carma_delphi_srr2_driver::CarmaDelphiSrr2Driver" name="carma_delphi_srr2_driver" namespace="$(var namespace)">
      <param name="use_sim_time" value="$(var use_sim_time)" />
      <extra_arg name="use_intra_process_comms" value="true" />
    </composable_node>
    <composable_node pkg="carma_velodyne_lidar_driver" plugin="carma_velodyne_lidar_driver::CarmaVelodyneLidarDriver" name="carma_velodyne_lidar_driver" namespace="$(var namespace)">
      <param name="use_sim_time" value="$(var use_sim_time)" />
      <extra_arg name="use_intra_process_comms" value="true" />
    </composable_node>
  </node_container>

  <!-- Nodes in the Localization Subsystem -->
  <node pkg="dead_reckoner" name="dead_reckoner" namespace="$(var namespace)" exec="dead_reckoner" output="screen" launch-prefix="$(env CARMA_LAUNCH_PREFIX '')" />
  <node pkg="ekf_localizer" name="ekf_localizer" namespace="$(var namespace)" exec="ekf_localizer" output="screen" launch-prefix="$(env CARMA_LAUNCH_PREFIX '')" />

  <!-- Static transform publisher -->
  <node pkg="tf2_ros" name="static_transform_publisher" namespace="$(var namespace)" exec="static_transform_publisher" output="screen" args="0 0 0 0 0 0 odom camera" launch-prefix="$(env CARMA_LAUNCH_PREFIX '')" />

  <node pkg="localization_health_monitor" name="localization_health_monitor" namespace="$(var namespace)" exec="localization_health_monitor" output="screen" launch-prefix="$(env CARMA_LAUNCH_PREFIX '')">
    <param name="auto_initialization_timeout" value="3000" />
    <param name="fitness_score_degraded_threshold" value="20.0" />
    <param name="fitness_score_fault_threshold" value="100000.0" />
    <param name="gnss_only_operation_timeout" value="20000" />
    <param name="ndt_frequency_degraded_threshold" value="8.0" />
    <param name="ndt_frequency_fault_threshold" value="0.01" />
  </node>

  <!-- The System Controller manages all of the lifecycle nodes -->
  <node pkg="system_controller" name="carma_system_controller" namespace="$(var namespace)" exec="system_controller" output="screen" launch-prefix="$(env CARMA_LAUNCH_PREFIX '')">
    <param name="use_sim_time" value="$(var use_sim_time)" />
    <param name="autostart" value="$(var autostart)" />
    <param name="node_names" value="['camera_driver', 'camera_driver_client', 'carma_delphi_srr2_driver', 'carma_velodyne_lidar_driver', 'dead_reckoner', 'ekf_localizer', 'localization_health_monitor']" />
  </node>

</launch>
